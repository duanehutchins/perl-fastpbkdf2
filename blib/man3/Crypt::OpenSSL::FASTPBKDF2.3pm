.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Crypt::OpenSSL::FASTPBKDF2 3pm"
.TH Crypt::OpenSSL::FASTPBKDF2 3pm "2017-04-26" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Crypt::OpenSSL::FASTPBKDF2 \- Perl wrapper for PBKDF2 keys derivation function of the OpenSSL library using fastpbkdf2
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Crypt::OpenSSL::FASTPBKDF2 qw/fastpbkdf2_hmac_sha1 fastpbkdf2_hmac_sha256 fastpbkdf2_hmac_sha512/;
\&
\&  # Initialize parameters for password, salt, number of iterations, and desired output length (in bytes)
\&  my ($password, $salt, $num_iterations, $output_len) = (\*(Aqpassword\*(Aq, \*(Aqsalt\*(Aq, 100, 32);
\&
\&  # Initialize buffer array (optional argument)
\&  my @buffer;
\&
\&  # Set hash results into scalar variables
\&  my $hash_sha1 = fastpbkdf2_hmac_sha1($password, $salt, $num_iterations, $output_len, @buffer);        #= 0x8595d7aea0e7c952a35af9a838cc6b393449307cfcc7bd340e7e32ee90115650
\&  my $hash_sha256 = fastpbkdf2_hmac_sha256($password, $salt, $num_iterations, $output_len, @buffer);    #= 0x07e6997180cf7f12904f04100d405d34888fdf62af6d506a0ecc23b196fe99d8
\&  my $hash_sha512 = fastpbkdf2_hmac_sha512($password, $salt, $num_iterations, $output_len, @buffer);    #= 0xfef7276b107040a0a713bcbec9fd3e191cc6153249e245a3e1a22087dbe61606
\&
\&  # Print the contents of the buffer as HEX
\&  print unpack(\*(AqH*\*(Aq, join(\*(Aq\*(Aq, @buffer)); # "8595d7aea0e7c952a35af9a838cc6b393449307cfcc7bd340e7e32ee9011565007e6997180cf7f12904f04100d405d34888fdf62af6d506a0ecc23b196fe99d8fef7276b107040a0a713bcbec9fd3e191cc6153249e245a3e1a22087dbe61606"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1PBKDF2\s0 applies a pseudorandom function, such as hash-based message authentication code (\s-1HMAC\s0), to the input password or passphrase along with a salt value and repeats the process many times to produce a derived key, which can then be used as a cryptographic key in subsequent operations. The added computational work makes password cracking much more difficult, and is known as key stretching.
fastpbkdf2 is a fast PBKDF2\-HMAC\-{\s-1SHA1,SHA256,SHA512\s0} implementation in C. It uses OpenSSL's hash functions, but out-performs OpenSSL's own \s-1PBKDF2\s0 thanks to various optimisations in the inner loop.
.PP
Crypt::OpenSSL::FASTPBKDF2 is a set of Perl bindings for fastpbkdf2.
.SH "Static Methods"
.IX Header "Static Methods"
.ie n .SS "fastpbkdf2_hmac_sha1 ($password, $salt, $iterations, $output_len, :@buffer)"
.el .SS "fastpbkdf2_hmac_sha1 ($password, \f(CW$salt\fP, \f(CW$iterations\fP, \f(CW$output_len\fP, :@buffer)"
.IX Subsection "fastpbkdf2_hmac_sha1 ($password, $salt, $iterations, $output_len, :@buffer)"
Executes \s-1PBKDF2\s0 via \s-1HMAC_SHA1\s0 to hash \f(CW$password\fR with \f(CW$salt\fR repeatedly, \f(CW$iterations\fR times, to derive and return a hash that is \f(CW$output_len\fR bytes long.
If the optional \f(CW@buffer\fR param is provided, the result will also be appended onto the array.
.ie n .SS "fastpbkdf2_hmac_sha256 ($password, $salt, $iterations, $output_len, :@buffer)"
.el .SS "fastpbkdf2_hmac_sha256 ($password, \f(CW$salt\fP, \f(CW$iterations\fP, \f(CW$output_len\fP, :@buffer)"
.IX Subsection "fastpbkdf2_hmac_sha256 ($password, $salt, $iterations, $output_len, :@buffer)"
Same as \f(CW\*(C`fastpbkdf2_hmac_sha1\*(C'\fR but instead uses \s-1HMAC_SHA256\s0
.ie n .SS "fastpbkdf2_hmac_sha512 ($password, $salt, $iterations, $output_len, :@buffer)"
.el .SS "fastpbkdf2_hmac_sha512 ($password, \f(CW$salt\fP, \f(CW$iterations\fP, \f(CW$output_len\fP, :@buffer)"
.IX Subsection "fastpbkdf2_hmac_sha512 ($password, $salt, $iterations, $output_len, :@buffer)"
Same as \f(CW\*(C`fastpbkdf2_hmac_sha1\*(C'\fR but instead uses \s-1HMAC_SHA512\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1NIST\-PBKDF2 \s0<http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800\-132.pdf>
.PP
Joseph Birr-Pixton \- fastpbkdf2 <https://github.com/ctz/fastpbkdf2>
.SH "AUTHOR"
.IX Header "AUTHOR"
Duane Hutchins \- Univeral Printing Company <duanehutchins@hotmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2017 Duane Hutchins \- Univeral Printing Company
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.16 or,
at your option, any later version of Perl 5 you may have available.
